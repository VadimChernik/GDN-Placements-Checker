// Этот скрипт проверяет места размещения GDN по следующим критериям:
// 1) Места размещения без конверсий, которые потратили больше X гривен
// 2) Места размещения, у которых стоимость конверсии более X гривен
// 3) Места размещения без конверсий, у которых более X показов и CTR меньше Y %
// 4) Места размещения без конверсий, у которых более X показов и CTR больше Y %
// 5) Места размещения без конверсий, у которых домен содержит запрещенное слово

var config = {
  // Указываем ссылку на Google Spreadsheet
  SPREADSHEET_URL:'Link to the Google Spreadsheet',
  // Указываем название проекта, которое будет указано в названии Google Spreadsheet                                               
  PROJECT_NAME:'Name of the project',
}
  
function getConfigData(spreadsheet) {
  //Указываем имя листа, на котором в первой колонке указаны маркеры плохих доменов для пятой выборки мест размещения
  var excludeDomainSheet = spreadsheet.getSheetByName('exclude_domain'),  
      values = excludeDomainSheet.getSheetValues(1,1,excludeDomainSheet.getLastRow(),1);
      config.exclude = [];

  if(typeof values == "object") {
       for (i=0; i < values.length; i++) {
          config.exclude.push(values[i][0]);
       }
  }

  Logger.log (config.exclude)

  //Указываем имя листа, на котором в первой колонке указаны маркеры доменов, которые не учитываются при анализе статистики
  var exceptDomainSheet = spreadsheet.getSheetByName('except_domain'),  
      values = exceptDomainSheet.getSheetValues(1,1,exceptDomainSheet.getLastRow(),1);
      config.except = [];

  if(typeof values == "object"){
       for (i=0; i < values.length; i++) {
          config.except.push(values[i][0]);
       }
  }

  Logger.log (config.except)

  var configSheet = spreadsheet.getSheetByName('config');                 // Указываем имя листа, на котором указаны основные настройки и критерии
  
  config.email = configSheet.getRange(1,2,1,1).getValues();               // Email, на который будет приходить отчет
  config.timeperiod = configSheet.getRange(2,2,1,1).getValue();           // Временной период для анализа статистики
  config.listCost = configSheet.getRange(3,2,1,1).getValue();             // Максимальный расход для первой выборки мест размещения
  config.list2ConversionCost = configSheet.getRange(4,2,1,1).getValue();  // Максимальная цена конверсии для второй выборки мест размещения
  config.list3Impressions = configSheet.getRange(5,2,1,1).getValue();     // Минимальное кол-во показов для третьей выборки мест размещения
  config.list3Ctr = configSheet.getRange(6,2,1,1).getValue();             // Максимальный CTR для третьей выборки мест размещения
  config.list4Impressions = configSheet.getRange(7,2,1,1).getValue();     // Минимальное кол-во показов для четветой выборки мест размещения
  config.list4Ctr = configSheet.getRange(8,2,1,1).getValue()              // Минимальный CTR для четветой выборки мест размещения
}

function main() {
  var spreadsheet = SpreadsheetApp.openByUrl(config.SPREADSHEET_URL);
  var curDate = Utilities.formatDate(new Date(), "GMT+3", "yyyy-MMMM-dd");
      getConfigData(spreadsheet);
  
      // Обновляем имя документа с учетом последние даты работы скрипта
      spreadsheet.setName("GDN Report " + config.PROJECT_NAME + " " + curDate) 

  var body = "<h2>Google Display Network - Отчет по плохим местам размещений</h2>";
      body += "<h3>Места размещения, которые потратили больше " + config.listCost + " UAH и не принесли конверсий:</h3> " ;
      body += "<ul>";
  
  var list = runHightCostAndNoConvertingReport();
  var rows = [];
  for (i=0; i < list.length; i++) {
      body += "<li>" + list[i].placement + ' - ' + list[i].cost + ' UAH ' + "</li>";
      }
    
  addPlacementList('list1',list,spreadsheet);

      body += "</ul>";
      body += "<h3>Места размещения, у которых стоимость конверсии более " + config.list2ConversionCost + " UAH:</h3> " ;
      body += "<ul>";
  
  var list2 = runHighCostOfConversionsReport();

  for (i=0; i < list2.length; i++) {
      body += "<li>" + list2[i].placement + ' - ' + list2[i].cost + ' UAH ' + ' - Стоимость конверсии - ' + list2[i].costperconversion + ' UAH ' + "</li>";
      }
  
  addPlacementList('list2',list2,spreadsheet);

      body += "</ul>";
      body += "<h3>Места размещения, у которых более " + config.list3Impressions + " показов и CTR меньше " + config.list3Ctr + "%:</h3> " ;
      body += "<ul>";

  var list3 = runBadCtrNoConversionsReport();
  
      body += "<li>Количество исключений - " + list3.length + "</li>";

  addPlacementList('list3',list3,spreadsheet);
  
      body += "</ul>";
      body += "<h3>Места размещения, у которых более " + config.list4Impressions + " показов и CTR больше " + config.list4Ctr + "%:</h3> " ;
      body += "<ul>";

  var list4 = runHighCtrReport();
  
      body += "<li>Количество исключений - " + list4.length + "</li>";
  
  addPlacementList('list4',list4,spreadsheet);

      body += "</ul>";
      body += "<h3>Места размещения, у которых домен содержит запрещенное слово:</h3> " ;
      body += "<ul>";

  var list5 = gamePlacements();
  
      body += "<li>Количество исключений - " + list5.length + "</li>";
  
  addPlacementList('list5',list5,spreadsheet);
  
      body += "</ul>";
      body += "<a href='"+spreadsheet.getUrl()+"'>Ссылка на отчет Google Spreadsheet</a>";

  // Отправляем на почту отчет по отобранным местам размещения
  if(config.email.length){
      MailApp.sendEmail(config.email,'Display Network Alerts - ' + config.PROJECT_NAME + " - " + curDate, body,{htmlBody: body}); 
      }
}

// Функция добавления мест размещения в исключения
function addPlacementList(nameList,list,spreadsheet) {
  var rows = [],
      sheet,
      range,
      listSharedExcludedPlacementIterator;
  
  sheet = spreadsheet.getSheetByName(nameList);
  sheet.clear();

  range = sheet.getRange(1, 1, 1, 7).setValues([['Exclusion URL','Impressions','Clicks','CTR','Cost','Conversions','Cost Per Conversion']]);
  range.setBackground("yellow");

  listSharedExcludedPlacementIterator = AdWordsApp.excludedPlacementLists()
     .withCondition("Name CONTAINS '" + nameList + "'").get();

  while (listSharedExcludedPlacementIterator.hasNext()) {
      listSharedExcludedPlacement = listSharedExcludedPlacementIterator.next();
  }

  for (i=0; i < list.length; i++) { 
    listSharedExcludedPlacement.addExcludedPlacement(list[i].placement);
    rows.push([list[i].placement, list[i].impressions, list[i].clicks, list[i].clicks / list[i].impressions * 100 + "%", list[i].cost, list[i].conversions, list[i].costperconversion])
  }
  
  if(rows.length)
     sheet.getRange(2, 1, rows.length, 7).setValues(rows).sort({column: 2, ascending: false});
}

function runHightCostAndNoConvertingReport() {

  list = [];
  
  var periodString = '';

  if(config.timeperiod) {
    periodString = 'DURING ' + config.timeperiod;
    Logger.log(periodString);
  } else {
    Logger.log('DURING ALL TIME');
  }
  
  // Любые места размещения, которые потратили больше X гривен и не принесли конверсий 
  var report = AdWordsApp.report(
     'SELECT Domain, Clicks, Impressions, CostPerConversion, Conversions, Cost ' +
     'FROM AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT ' +
     'WHERE Cost > ' + config.listCost * 1000000 + " " + 
     'AND Conversions < 1 ' + 
     periodString);

  var rows = report.rows();

   while (rows.hasNext()) {
           
      var row = rows.next();      

      var anonymous = row['Domain'].match(new RegExp(config.except.join('|').replace(/\./g,'\\.'),'g'));
       if (anonymous == null) { 
        var placementDetail = new placementObject(row['Domain'], row['Clicks'], row['Impressions'], row['CostPerConversion'],row['Conversions'], row['Cost']);
           
        list.push(placementDetail);
       } 
   }
   return list;
}

function runHighCostOfConversionsReport() {

  list = [];
  
  var periodString = '';

  if(config.timeperiod) {
    periodString = 'DURING ' + config.timeperiod;
    Logger.log(periodString);
  } else {
    Logger.log('DURING ALL TIME');
  }
    
  // Любые места размещения, у которых стоимость конверсии более X гривен
  var report = AdWordsApp.report(
     'SELECT Domain, Clicks, Impressions, CostPerConversion, Conversions, Cost ' +
     'FROM AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT ' +
     'WHERE CostPerConversion > ' + config.list2ConversionCost * 1000000 + " " +
     'AND Conversions > 1 ' + 
     periodString);

  var rows = report.rows();

   while (rows.hasNext()) {
           
      var row = rows.next();      

      var anonymous = row['Domain'].match(new RegExp(config.except.join('|').replace(/\./g,'\\.'),'g'));
       if (anonymous == null) { 
            
        var placementDetail = new placementObject(row['Domain'], row['Clicks'], row['Impressions'], row['CostPerConversion'], row['Conversions'], row['Cost']);
           
        list.push(placementDetail);
       } 
   }
   return list;
}

function runBadCtrNoConversionsReport() {

  list = [];
  
  var periodString = '';

  if(config.timeperiod) {
    periodString = 'DURING ' + config.timeperiod;
    Logger.log(periodString);
  } else {
    Logger.log('DURING ALL TIME');
  }
      
  // Любые места размещения без конверсий, у которых более X показов и CTR меньше Y %
  var report = AdWordsApp.report(
     'SELECT Domain, Clicks, Impressions, CostPerConversion, Conversions, Cost ' +
     'FROM AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT ' +
     'WHERE Impressions > ' + config.list3Impressions + " " +
     'AND Ctr < ' + config.list3Ctr * 0.01 + " " +
     'AND Conversions < 1 ' + 
     periodString);

  var rows = report.rows();

   while (rows.hasNext()) {
           
      var row = rows.next();      

      var anonymous = row['Domain'].match(new RegExp(config.except.join('|').replace(/\./g,'\\.'),'g'));
       if (anonymous == null) {     
        var placementDetail = new placementObject(row['Domain'], row['Clicks'], row['Impressions'], row['CostPerConversion'], row['Conversions'], row['Cost']);
           
        list.push(placementDetail);
       
       } 
   }
   return list;
}

function runHighCtrReport() {

  list = [];
  
  var periodString = '';

  if(config.timeperiod) {
    periodString = 'DURING ' + config.timeperiod;
    Logger.log(periodString);
  } else {
    Logger.log('DURING ALL TIME');
  }
       
  // Любые места размещения без конверсий, у которых более X показов и CTR больше Y %
  var report = AdWordsApp.report(
     'SELECT Domain, Clicks, Impressions, CostPerConversion, Conversions, Cost ' +
     'FROM AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT ' +
     'WHERE Impressions > ' + config.list4Impressions + " " +
     'AND Ctr > ' + config.list4Ctr * 0.01 + " " +
     'AND Conversions < 1 ' + 
     periodString);

  var rows = report.rows();

   while (rows.hasNext()) {
           
      var row = rows.next();      

      var anonymous = row['Domain'].match(new RegExp(config.except.join('|').replace(/\./g,'\\.'),'g'));
       if (anonymous == null) { 
   
        var placementDetail = new placementObject(row['Domain'], row['Clicks'],row['Impressions'], row['CostPerConversion'],  row['Conversions'], row['Cost']);
           
        list.push(placementDetail);
       } 
   }
   return list;
}

function gamePlacements() {

  list = [];
  
  var periodString = '';

  if(config.timeperiod) {
    periodString = 'DURING ' + config.timeperiod;
    Logger.log(periodString);
  } else {
    Logger.log('DURING ALL TIME');
  }
    
  // Любые места размещения без конверсий, у которых домен содержит запрещенное слово
  var report = AdWordsApp.report(
     'SELECT Domain, Clicks, Impressions, CostPerConversion, Conversions, Cost ' +
     'FROM AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT ' +
     'WHERE Conversions < 1 ' +
     periodString);

  var rows = report.rows();

   while (rows.hasNext()) {
           
      var row = rows.next();      

      var anonymous = row['Domain'].match(new RegExp(config.except.join('|').replace(/\./g,'\\.'),'g'));
       if (anonymous == null) { 
       var placement = row['Domain'];

       var clicks = row['Clicks'];
       var impressions = row['Impressions'];
       var costperconversion = row['CostPerConversion']
       var conversions = row['Conversions'];
       var cost = row['Cost'];
       
       var placementDetail = new placementObject(placement, clicks, impressions, costperconversion, conversions, cost);

       if (containsAny(placement.toString(), config.exclude)) {
       var placementDetail = new placementObject(placement, clicks, impressions, costperconversion, conversions, cost);
       list.push(placementDetail);
      }
   }
    
} 
  return list;
}

function containsAny(str, substrings) {
  for (var i = 0; i != substrings.length; i++) {
    var substring = substrings[i];
    if (str.indexOf(substring) != - 1) {
      return substring;
    }
  }
  return null;
}

function placementObject(placement, clicks, impressions, costperconversion, conversions, cost) {
  this.placement = placement;
  this.clicks = clicks;
  this.impressions = impressions;
  this.costperconversion = costperconversion;
  this.conversions = conversions;
  this.cost = cost;
}
